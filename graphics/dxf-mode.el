;;;; DXF display and editing tools
;;; Time-stamp: <2016-03-27 14:12:54 jcgs>

(defvar dxf-code-details
  '((0 "type")
    (1 "text")
    (2 "name")
    (3 "other text")
    (4 "other text")
    (5 "entity handle")
    (6 "linetype name")
    (7 "text style name")
    (8 "layer name")
    (9 "variable name identifier")
    (10 "primary point X")
    (11 "other point X")
    (12 "other point X")
    (13 "other point X")
    (14 "other point X")
    (15 "other point X")
    (16 "other point X")
    (17 "other point X")
    (18 "other point X")
    (20 "primary point Y")
    (21 "other point Y")
    (22 "other point Y")
    (23 "other point Y")
    (24 "other point Y")
    (25 "other point Y")
    (26 "other point Y")
    (27 "other point Y")
    (28 "other point Y")
    (30 "primary point Z")
    (31 "other point Z")
    (32 "other point Z")
    (33 "other point Z")
    (34 "other point Z")
    (35 "other point Z")
    (36 "other point Z")
    (37 "other point Z")
    (38 "elevation")
    (70 "integer value")
    (71 "integer value")
    (72 "integer value")
    (73 "integer value")
    (74 "integer value")
    (75 "integer value")
    (76 "integer value")
    (77 "integer value")
    (78 "integer value")
    (90 "32-bit integer value")
    (91 "32-bit integer value")
    (92 "32-bit integer value")
    (93 "32-bit integer value")
    (94 "32-bit integer value")
    (95 "32-bit integer value")
    (96 "32-bit integer value")
    (97 "32-bit integer value")
    (98 "32-bit integer value")
    (99 "32-bit integer value")
    (100 "subclass data")
    (102 "control string")
    )
  "Definitions of the numeric codes.")

(defun dxf-mode-annotate-region (from to)
  "Annotate the region between FROM and TO."
  (interactive "r")
  (put-text-property from to 'help-echo nil)
  (goto-char from)
  (with-silent-modifications
    (while (re-search-forward "^\\s-*\\([0-9]+\\)\\s-*$" to t)
      (let* ((code-number (string-to-number (match-string 1)))
	     (start (match-beginning 1))
	     (code-end (match-end 1))
	     (code-details (assoc code-number dxf-code-details)))
	(if (null code-details)
	    (error "unknown code %d at %d" code-number start)
	  (let ((string (nth 1 code-details))
		(skip (or (nth 2 code-details) 1))
		)
	    (beginning-of-line (+ skip 2))
	    (put-text-property start code-end 'display string) ; todo: fontify this
	    ;; todo: fontify the data part (put-text-property code-end (point) 'font-lock-face ....)
	    (put-text-property start (point) 'help-echo string)
	    ))))))

(defvar dxf-mode-keymap
  (let ((map (make-keymap "DXF")))
    map))

(defun dxf-mode ()
  "Major mode for DXF files."
  (interactive)
  (fundamental-mode)
  (tooltip-mode 1)
  (setq major-mode 'dxf-mode
	mode-name "DXF")
  (dxf-mode-annotate-region (point-min) (point-max)))

(provide 'dxf-mode)
